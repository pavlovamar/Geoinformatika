import osmnx as ox
from osmnx import graph_to_gdfs
import matplotlib.pyplot as plt
from math import inf
from queue import PriorityQueue
import networkx as nx
from copy import deepcopy

# Creating a graph of the chosen area
def create_graph(place_name):
    graph = ox.graph_from_place(place_name, network_type = 'drive')            # Only roads, no pedestrian pathways
    fig, ax = ox.plot_graph(graph)
    nodes = graph.nodes(data = True)
    plt.show()
    return graph

# Define speed limits based on the road type (in km/h)
speed_limit = {
    'motorway': 130, 
    'motorway_link': 130, 
    'trunk': 110,
    'trunk_link': 110,
    'primary': 90,
    'primary_link': 90,
    'secondary': 90,
    'secondary_link': 90, 
    'tertiary': 90, 
    'tertiary_link': 90,
    'residential': 50, 
    'living_street': 30,
    'unclassified': 30
    }

# Calculate travel time based on the distance and road type (speed limit)
def calculate_travel_time(distance, road_type):
    if isinstance(road_type, list):
        road_type = tuple(road_type)
    speed = speed_limit.get(road_type, 30)
    if speed is None or speed == 0:
        return float('inf')                                # Avoid division by zero
    travel_time = 3600 * (distance/1000)/speed
    return travel_time

# Dijkstra + Bellman algorithm
def shortest_path_algorithm(graph, start, weight, algorithm='dijkstra'):
    n = len(graph)                                             # Number of nodes
    P = (n + 1) * [-1]                                         # List of predecessors
    D = (n + 1) * [float('inf')]                               # List of distances
    D[start] = 0                                               # Strat node
    if algorithm == 'dijkstra':
        PQ = PriorityQueue()
        PQ.put((0, start))                                     # Add start vertex
        while not PQ.empty():                                  # Repeat until queue is empty
            du, u = PQ.get()                                   # Get node and distance 
            for v, edge_attributes in graph[u].items():        # Go through all neighbors
                wuv = edge_attributes
                if D[v] > D[u] + wuv[weight]:                  # Relaxation
                    D[v] = D[u] + wuv[weight]                  # Update distance
                    P[v] = u                                   # Update predecessor
                    PQ.put((D[v], v))                          # Add node to queue

    elif algorithm == 'bellman':
        for _ in range(n - 1):
            for u in graph.keys():
                for v, (length, w) in graph[u].items():
                    if weight == 0:  # Use length as weight
                        if D[u] + length < D[v]:
                            D[v] = D[u] + length
                            P[v] = u
                    elif weight == 1:  # Use time as weight
                        if D[u] + w < D[v]:
                            D[v] = D[u] + w
                            P[v] = u

        # Check for negative weight cycle
        for u in graph.keys():
            for v, (length, w) in graph[u].items():
                if weight == 0:
                    if D[u] + length < D[v]:
                        print("Graph contains negative weight cycle")
                        return None, None
                elif weight == 1:
                    if D[u] + w < D[v]:
                        print("Graph contains negative weight cycle")
                        return None, None

    return P, D

def reconstruct_path(P, G, start, end, weight):
    path = []                                                   # Create empty path
    current_node = end
    distance = 0
    time = 0
    while current_node != -1 and current_node != start:
        path.append(current_node)                               # Add node to path
        current_node = P[current_node]
        if P[current_node] != -1:
            distance += G[current_node][P[current_node]][0]
            time += G[current_node][P[current_node]][1]
    if current_node == start:
        path.append(start)
    return path [::-1], distance, time 

def visualize_graph(G, C, path):
    Graph = nx.Graph()
    for start, values in G.items():
        for end in values.keys():
            Graph.add_edge(start, end)
    path_edges = list(zip(path, path[1:]))
    nx.draw_networkx_edges(Graph, pos = C, edgelist = Graph.edges(), edge_color = 'lightgray', width = 1)
    nx.draw_networkx_edges(Graph, pos = C, edgelist = path_edges, edge_color = 'green', width = 2)
    plt.show()

# Minimum Spanning Tree 
def make_set(u, p, r):
    p[u] = u
    r[u] = 0

def find(u, p):
    while (p[u] != u):                          # Find root
        u = p[u]
    root = u
    while u != root:
        up = p[u]                               # Store predecessor
        p[u] = root                             # Change predecessor to root
        u = up                                  # Go to parent
    return u

def weighted_union(u, v, p, r):
    root_u = find(u, p)                         # Find root for u + compress
    root_v = find(v, p)                         # Find root for v + compress
    if root_u != root_v:                        # u, v in different subtrees
        if r[root_u] > r[root_v]:               # u subtree is longer
            p[root_v] = root_u                  # Connect v to u
        elif r[root_v] > r[root_u]:             # v subtree is longer
            p[root_u] = root_v                  # Connect u to v
        else:                                   # u, v have equal lengths
            p[root_u] = root_v                  # Connect u to v
            r[root_v] = r[root_v]+1             # Increment rank

def boruvka(V, E):
    T=[]                                        # Empty tree
    wt = 0                                      # Sum of weights of T
    p = [inf] * (len(V) + 1)                    # List of roots
    r = [inf] * (len(E) + 1)                    # Rank of the node
    for v in V:                                 # Make set
        make_set(v, p, r)                       # Initilize p and r
    ES = sorted(E, key=lambda it:it[2])         # Sort edges by w
    for e in ES:                                # Process all edges
        u, v, w = e                             # Take an edge
        if (find(u, p) != find(v, p)):          # roots u, v in different trees?
            weighted_union(u, v, p, r)          # Create union
            T.append([u, v, w])                 # Add edge to tree
            wt = wt + w                         # Compute weight of T
    return wt, T

def visualize_minimum_spanning_tree(G, C, minimum_spanning_tree_edges):
    nx_G = nx.Graph()
    for start, values in G.items():
        for end in values.keys():
            nx_G.add_edge(start, end)
    
    nx.draw_networkx_edges(nx_G, pos=C, edgelist=nx_G.edges(), edge_color='lightgray', width=1)
    nx.draw_networkx_edges(nx_G, pos=C, edgelist=minimum_spanning_tree_edges, edge_color='red', width=2)
    plt.show()

# Finding the shortest distance between all pairs of nodes
def shortest_distance(graph):
    num_nodes = len(graph)
    distance_matrix = [[inf] * (num_nodes + 1) for _ in range(num_nodes + 1)]

    for node in graph:
        for neighbor, attributes in graph[node].items():
            distance_matrix[node][neighbor] = attributes[0]
    
    for k in range(1, num_nodes + 1):
        for i in range(1, num_nodes + 1):
            for j in range(1, num_nodes + 1):
                if distance_matrix[i][j] > distance_matrix[i][k] + distance_matrix[k][j]:
                    distance_matrix[i][j] = distance_matrix[i][k] + distance_matrix[k][j]
    
    return distance_matrix

def main():
    place_name = "Kobylisy, Prague, Czechia"
    graph = create_graph(place_name)

    nodes, edges = graph_to_gdfs(graph)
    nodes_dict = nodes.to_dict()
    edges_dict = edges.to_dict()

    G = {}
    for highway, length, geometry in zip(edges_dict['highway'].values(), edges_dict['length'].values(), edges_dict['geometry'].keys()):
        time = calculate_travel_time(length, highway)
        if time == inf:
            continue
        if not geometry[1] in G:
            G[geometry[1]] = {}
        G[geometry[1]][geometry[0]] = [length, time]
        if not geometry[0] in G:
            G[geometry[0]] = {}
        G[geometry[0]][geometry[1]] = [length, time] 

    C = {}
    for x, (id, y) in zip(nodes_dict['x'].values(), nodes_dict['y'].items()):
        C[id] = [x, y]
    node_number = 1
    keys = deepcopy(list(C.keys()))
    for key in keys:
        C[node_number] = C[key]
        G[node_number] = G[key]
        del C[key]
        del G[key]
        for idx_inc, value in G.items():
            keys_2 = deepcopy(list(value.keys()))
            for key2 in keys_2:
                if key2 == key:
                    G[idx_inc][node_number] = G[idx_inc][key2]
                    del G[idx_inc][key2]
        node_number += 1   

    start_node = 1
    end_node = 16   

    P_s, D_s = shortest_path_algorithm(G, start_node, 0, algorithm='dijkstra')
    P_f, D_f = shortest_path_algorithm(G, start_node, 1, algorithm='dijkstra')

    P_bs, D_bs = shortest_path_algorithm(G, start_node, 0, algorithm='bellman')
    P_bf, D_bf = shortest_path_algorithm(G, start_node, 1, algorithm='bellman')

    shortest_path_graph, distance_shortest_path, time_shortest_path = reconstruct_path(P_s, G, start_node, end_node, 0)
    fastest_path_graph, distance_fastest_path, time_fastest_path = reconstruct_path(P_f, G, start_node, end_node, 1)
    
    visualize_graph(G, C, shortest_path_graph)
    visualize_graph(G, C, fastest_path_graph)
    
    #Bellman-Ford
    if P_s and P_f:
        bellman_path_graph, distance_bellman_path, time_bellman_path = reconstruct_path(P_bs, G, start_node, end_node, 0)
        bellman_path_graph_fast, distance_bellman_path_fast, time_bellman_path_fast = reconstruct_path(P_bf, G, start_node, end_node, 1)
        
        visualize_graph(G, C, bellman_path_graph)
        visualize_graph(G, C, bellman_path_graph_fast)
 
    # Printing out the result for the distance between two nodes
    distance_matrix = shortest_distance(G)
    shortest_distance_1_to_16 = distance_matrix[start_node][end_node]
    print(f"The shortest distance between node {start_node} and node {end_node} is {round(shortest_distance_1_to_16/1000, 1)} kilometers.")

    # Printing out results for the shortest and fastest path – Dijkstra
    print(f"The shortest Path (Dijkstra) is {round((distance_shortest_path/1000), 2)} km long and takes {round((time_shortest_path/60), 2)} minutes")
    print(f"The Fastest Path (Dijkstra) is {round((distance_fastest_path/1000), 2)} km long and takes {round((time_fastest_path/60), 2)} minutes")

    # Printing out results for the shortest and fastest path – Bellman-Ford
    if P_s and P_f:
        print(f"The shortest Path (Bellman) is {round((distance_bellman_path/1000), 2)} km long and takes {round((time_bellman_path/60), 2)} minutes")
        print(f"The Fastest Path (Bellman) is {round((distance_bellman_path_fast/1000), 2)} km long and takes {round((time_bellman_path_fast/60), 2)} minutes")

    # Minimum Spanning Tree
    V = list(G.keys())
    E = []
    for start_node, values in G.items():
        for end_node, attributes in values.items():
            E.append([start_node, end_node, attributes[0]])
    wt, T = boruvka(V, E)
    visualize_minimum_spanning_tree(G, C, [edge[:2] for edge in T])

main()
